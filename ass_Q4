%%Q4

% Q4 Particle Filter (Sequential Monte Carlo) for a Nonlinear State-Space Model

% Define simulation parameters
n = 100;          % Time steps
N = 1000;         % Number of particles

% Generate the 'true' state and observed data (for simulation)
X_true = zeros(n,1);      % Real state trajectory
Y = zeros(n,1);           % Observations

% Initial state
X_true(1) = 10 + randn;   % Initial state from N(10,1)

% Nonlinear state evolution and observation generation
for k = 2:n
    X_prev = X_true(k-1);
    mu_k = 5*X_prev/(1+X_prev^4) + 8*X_prev/(1+abs(X_prev)) + 10*cos(pi*k/4);
    X_true(k) = mu_k + sqrt(10)*randn;                % State noise: N(0,10)
end
for k = 1:n
    Y(k) = (X_true(k)^2)/10 + sqrt(0.5)*randn;        % Observation noise: N(0,0.5)
end

% Particle Filter Initialization
X_particles = zeros(N, n);    % All particles' states
W = zeros(N, n);              % All particles' weights
X_particles(:,1) = 10 + randn(N,1);   % Sample initial state for all particles
W(:,1) = 1/N;                 % Uniform weights

ESS = zeros(n,1);             % Effective Sample Size
ESS(1) = N;                   % All weights equal at start

% Main particle filter loop
for k = 2:n
    % Predict step (nonlinear system evolution)
    X_prev = X_particles(:,k-1);
    mu_k = 5.*X_prev./(1+X_prev.^4) + 8.*X_prev./(1+abs(X_prev)) + 10*cos(pi*k/4);
    X_particles(:,k) = mu_k + sqrt(10)*randn(N,1);

    % Update step (compute observation likelihoods)
    mu_y = (X_particles(:,k).^2)/10;   % Expected observation for each particle
    W(:,k) = normpdf(Y(k), mu_y, sqrt(0.5));   % p(Y_k | X_k^(i))

    % Multiply by previous weights for sequential Bayesian update
    W(:,k) = W(:,k) .* W(:,k-1);

    % Normalize weights
    W(:,k) = W(:,k) / sum(W(:,k));

    % Compute Effective Sample Size (ESS)
    ESS(k) = 1 / sum(W(:,k).^2);

    % Resample if ESS below threshold (e.g., 5% of N)
    if ESS(k) < 0.05 * N
        idx = randsample(N, N, true, W(:,k));   % Resample with replacement
        X_particles(:,k) = X_particles(idx, k); % Replace particles
        W(:,k) = 1/N;                           % Reset weights
    end
end

%Compute posterior means and variances at each time step
X_mean = sum(X_particles .* W, 1)';                           % Filtering mean
X_var = sum(((X_particles - X_mean').^2) .* W, 1)';           % Filtering variance


figure;
plot(1:n, X_true, 'k-', 'LineWidth',2); hold on;
plot(1:n, X_mean, 'r-', 'LineWidth',1.5);
plot(1:n, X_mean + sqrt(X_var), 'b--');
plot(1:n, X_mean - sqrt(X_var), 'b--');
xlabel('Time step'); ylabel('State');
legend('True State', 'Estimated Mean', 'Mean \pm 1 SD');
title('Particle Filter: State Estimation');

figure;
imagesc(X_particles(:,1:10:end)'); colorbar;
xlabel('Particle index'); ylabel('Time (every 10 steps)');
title('Particle Trajectories');

figure;
plot(1:n, ESS, 'LineWidth',1.5);
xlabel('Time step'); ylabel('Effective Sample Size (ESS)');
title('ESS over time');
